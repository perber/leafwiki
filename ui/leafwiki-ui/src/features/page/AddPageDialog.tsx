import { FormActions } from '@/components/FormActions'
import { FormInput } from '@/components/FormInput'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle
} from '@/components/ui/dialog'
import { useDebounce } from '@/lib/useDebounce'
import { useAddPageDialogStore } from '@/stores/addPageDialogStore'
import { useTreeStore } from '@/stores/tree'
import { useCallback, useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'


export function AddPageDialog() {
  const {
    open,
    loading,
    errors,
    slug,
    success,
    setSlug,
    setTitle,
    createPage,
    closeDialog,
    getSlug,
    parentId,
  } = useAddPageDialogStore();
  const getPathById = useTreeStore((s) => s.getPathById)
  const navigate = useNavigate()
  
  // local state for title and slug
  const [localTitle, setLocalTitle] = useState<string>('')
  const [localSlug, setLocalSlug] = useState<string>('')
  const [parentPath, setParentPath] = useState<string>('')

  useEffect(() => {
    if (parentId) {
      const path = getPathById(parentId)
      setParentPath(path || '')
    }
  }, [parentId, getPathById])

  // debounced title for slug generation
  const debouncedTitle = useDebounce(localTitle, 200)

  const handleFieldChange = useCallback((field: string, val: string) => {
    if (field === 'slug') {
      setLocalSlug(val)
    } else if (field === 'title') {
      setLocalTitle(val)
    }
  }, [localTitle, localSlug])

  useEffect(() => {
    if (debouncedTitle) {
      // Call the getSlug function from the store - this will trigger the API call
      getSlug(parentId, debouncedTitle)
    }

    // Reset the slug if the title is empty
    if (!debouncedTitle) {
      setSlug('')
      setLocalSlug('')
    }
  }, [debouncedTitle])

  // Set the slug when it is generated by the API
  useEffect(() => {
    if (slug) {
      setLocalSlug(slug)
    }
  }, [slug])

  // Reset the localSlug and localTitle when the dialog is closed
  useEffect(() => {
    if (!open) {
      setLocalTitle('')
      setLocalSlug('')
    }
  }, [open])

  // Handle the case when the page is created successfully
  useEffect(() => {
    if (success) {
      // Navigate to the new page
      if (!parentPath && slug) {
        navigate(`/e/${slug}`)
      } else if (parentPath && slug) {
        navigate(`/e/${parentPath}/${slug}`)
      }
      closeDialog()
    }
  }, [success, parentId, parentPath, slug])

  const handleCreate = async () => {
    if (!localTitle || !localSlug || loading) return
    setTitle(localTitle)
    setSlug(localSlug)
    await createPage()
  }

  const onHandleOpenChange = (open: boolean) => {
    if (!open) {
      // Reset the state when the dialog is closed
      setLocalTitle('')
      setLocalSlug('')
      // store
      closeDialog()
    }
  }

  return (
    <Dialog open={open} onOpenChange={onHandleOpenChange}>
      <DialogContent
        onKeyDown={(e) => {
          if (e.key === 'Enter' && !e.shiftKey && !loading && localTitle && localSlug) {
            e.preventDefault()
            handleCreate()
          }
        }}
      >
        <DialogHeader>
          <DialogTitle>Create a new page</DialogTitle>
          <DialogDescription>Enter the title of the new page</DialogDescription>
        </DialogHeader>
        <div className="space-y-4">
          <FormInput
            autoFocus={true}
            label="Title"
            value={localTitle}
            onChange={(val) => {
              handleFieldChange("title", val)
            }}
            placeholder="Page title"
            error={errors?.title}
          />

          <FormInput
            label="Slug"
            value={localSlug}
            onChange={(val) => {
              handleFieldChange("slug", val)
            }}
            placeholder="Page slug"
            error={errors?.slug}
          />
        </div>
        <span className="text-sm text-gray-500">
          Path: {parentPath !== '' && `${parentPath}/`}
          {localSlug}
        </span>
        <div className="mt-4 flex justify-end">
          <FormActions
            onCancel={() => onHandleOpenChange(false)}
            onSave={handleCreate}
            saveLabel={loading ? 'Creatingâ€¦' : 'Create'}
            disabled={!localTitle || !localSlug || loading}
            loading={loading}
          />
        </div>
      </DialogContent>
    </Dialog>
  )
}
